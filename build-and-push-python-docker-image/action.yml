name: "Build and Push Python Package"
description: "Builds and pushes a python package from the given source. The package will be pushed to codeartifact"
inputs:
  aws-access-key-id:
    description: "The aws access key id used for login."
    required: true
  aws-secret-access-key:
    description: "The aws secret access key used for login."
    required: true
  aws-account-id:
    description: "The aws account id used for login."
    required: true
  role-external-id:
    description: "The external ID of the role to assume."
    required: true
  codeartifact-role-to-assume:
    description: "The role to assume when connecting to codeartifact."
    required: true
  ecr-role-to-assume:
    description: "The role to assume when connecting to ecr."
    required: true
  aws-region:
    description: "AWS region of the codeartifact domain."
    required: true
  docker-path-context:
    description: "The paht where the dockerfile is located at."
    required: false
    default: .
  docker-file:
    description: "The dockerfile to use for building the docker image."
    required: true
  docker-image-version-tag:
    description: "The version tag to set when the docker image is built."
    required: true

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: "Configure AWS Credentials"
      uses: kraussmaffei/actions/configure-aws-credentials@main
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        role-to-assume: ${{ inputs.codeartifact-role-to-assume }}
        role-external-id: ${{ inputs.role-external-id }}
        role-skip-session-tagging: true
        mask-aws-account-id: false
        aws-region: ${{ inputs.aws-region }}

    - name: "CodeArtifact login (pip)"
      uses: kraussmaffei/aws-tools-login@main
      with:
        account: ${{ inputs.aws-account-id }}
        region: ${{ inputs.aws-region }}
        aws-tool: "codeartifact-pip"
        codeartifact-domain: ${{ inputs.codeartifact-domain }}
        codeartifact-repository: ${{ inputs.codeartifact-repository }}

    - name: Copy pip config to active workspace
      shell: bash
      run: cp ~/.config/pip/pip.conf ./pip.conf

    - name: "Configure AWS Credentials"
      uses: kraussmaffei/actions/configure-aws-credentials@main
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        role-to-assume: ${{ inputs.ecr-role-to-assume }}
        role-external-id: ${{ inputs.role-external-id }}
        role-skip-session-tagging: true
        mask-aws-account-id: false
        aws-region: ${{ inputs.aws-region }}

    - name: Login to AWS ECR
      uses: docker/login-action@v1
      with:
        registry: ${{ inputs.aws-account-id }}.dkr.ecr.eu-central-1.amazonaws.com
        logout: true

    - name: "Build, tag, and push image to Amazon ECR"
      uses: docker/build-push-action@v2
      env:
        REPOSITORY_NAME: ${{ github.event.repository.name }}
        AWS_ECR_REGISTRY: ${{ inputs.aws-account-id }}.dkr.ecr.eu-central-1.amazonaws.com
      with:
        context: ${{ inputs.docker-path-context }}
        file: ${{ inputs.docker-file }}
        push: true
        build-args: |
          PYTHON_PACKAGE=${{ env.REPOSITORY_NAME }}==${{ inputs.docker-image-version-tag }}
        tags: |
          ${{ env.AWS_ECR_REGISTRY }}/${{ env.REPOSITORY_NAME }}:${{ inputs.docker-image-version-tag }}
          ${{ env.AWS_ECR_REGISTRY }}/${{ env.REPOSITORY_NAME }}:latest
        secret-files: |
          "PIP_CONFIG=./pip.conf"
